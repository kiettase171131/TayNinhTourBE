using TayNinhTourApi.BusinessLogicLayer.DTOs.Response.TourBooking;
using TayNinhTourApi.BusinessLogicLayer.Services.Interface;
using TayNinhTourApi.BusinessLogicLayer.Utilities;
using TayNinhTourApi.DataAccessLayer.UnitOfWork.Interface;

namespace TayNinhTourApi.BusinessLogicLayer.Services
{
    /// <summary>
    /// Service g·ª≠i th√¥ng b√°o cho TourCompany v·ªÅ c√°c s·ª± ki·ªán booking
    /// OPTIMIZED: Ch·ªâ g·ª≠i in-app notifications, b·ªè email ƒë·ªÉ t·ªëi ∆∞u hi·ªáu nƒÉng
    /// </summary>
    public class TourCompanyNotificationService : ITourCompanyNotificationService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly INotificationService _notificationService;

        public TourCompanyNotificationService(
            IUnitOfWork unitOfWork,
            INotificationService notificationService)
        {
            _unitOfWork = unitOfWork;
            _notificationService = notificationService;
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi c√≥ booking m·ªõi
        /// OPTIMIZED: Ch·ªâ g·ª≠i in-app notification, kh√¥ng g·ª≠i email
        /// </summary>
        public async Task<bool> NotifyNewBookingAsync(Guid tourCompanyUserId, TourBookingDto booking)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification ONLY
                await _notificationService.CreateNewBookingNotificationAsync(tourCompanyUserId, booking);

                Console.WriteLine($"New booking notification sent (in-app only) for user {tourCompanyUserId}, booking: {booking.BookingCode}");
                return true;
            }
            catch (Exception ex)
            {
                // Log error but don't throw to avoid breaking the main flow
                Console.WriteLine($"Error sending new booking notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi tour b·ªã h·ªßy t·ª± ƒë·ªông
        /// OPTIMIZED: Ch·ªâ g·ª≠i in-app notification, kh√¥ng g·ª≠i email
        /// </summary>
        public async Task<bool> NotifyTourCancellationAsync(
            Guid tourCompanyUserId, 
            List<TourBookingDto> affectedBookings, 
            string tourTitle, 
            DateTime tourStartDate, 
            string reason)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification ONLY
                await _notificationService.CreateTourCancellationNotificationAsync(
                    tourCompanyUserId, affectedBookings, tourTitle, tourStartDate, reason);

                Console.WriteLine($"Tour cancellation notification sent (in-app only) for user {tourCompanyUserId}, tour: {tourTitle}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending tour cancellation notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi kh√°ch h√†ng h·ªßy booking
        /// OPTIMIZED: Ch·ªâ g·ª≠i in-app notification, kh√¥ng g·ª≠i email
        /// </summary>
        public async Task<bool> NotifyBookingCancellationAsync(Guid tourCompanyUserId, TourBookingDto booking, string? reason)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification ONLY
                await _notificationService.CreateBookingCancellationNotificationAsync(tourCompanyUserId, booking, reason);

                Console.WriteLine($"Booking cancellation notification sent (in-app only) for user {tourCompanyUserId}, booking: {booking.BookingCode}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending booking cancellation notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi ti·ªÅn ƒë∆∞·ª£c chuy·ªÉn t·ª´ revenue hold sang wallet
        /// OPTIMIZED: Ch·ªâ g·ª≠i in-app notification, kh√¥ng g·ª≠i email
        /// </summary>
        public async Task<bool> NotifyRevenueTransferAsync(
            Guid tourCompanyUserId, 
            decimal amount, 
            string tourTitle, 
            DateTime tourCompletedDate)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification ONLY
                await _notificationService.CreateNotificationAsync(new DTOs.Request.Notification.CreateNotificationDto
                {
                    UserId = tourCompanyUserId,
                    Title = "üí∞ Ti·ªÅn tour ƒë√£ chuy·ªÉn v√†o v√≠",
                    Message = $"Ti·ªÅn t·ª´ tour '{tourTitle}' ({amount:N0} VNƒê) ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o v√≠. B·∫°n c√≥ th·ªÉ r√∫t ti·ªÅn ngay!",
                    Type = DataAccessLayer.Enums.NotificationType.Wallet,
                    Priority = DataAccessLayer.Enums.NotificationPriority.Medium,
                    Icon = "üí∞",
                    ActionUrl = "/tour-company/wallet"
                });

                Console.WriteLine($"Revenue transfer notification sent (in-app only) for user {tourCompanyUserId}, amount: {amount:N0} VNƒê");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending revenue transfer notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i email th√¥ng b√°o cho TourCompany
        /// DEPRECATED: Method deprecated as we only use in-app notifications now
        /// </summary>
        public async Task<bool> SendEmailNotificationAsync(Guid tourCompanyUserId, string subject, string htmlBody)
        {
            // ‚ö° EMAIL FUNCTIONALITY REMOVED FOR PERFORMANCE OPTIMIZATION
            Console.WriteLine($"Email notification skipped (performance optimization) for user {tourCompanyUserId}, subject: {subject}");
            return true; // Return true to maintain compatibility
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi TourGuide t·ª´ ch·ªëi l·ªùi m·ªùi
        /// OPTIMIZED: Ch·ªâ g·ª≠i in-app notification, kh√¥ng g·ª≠i email
        /// </summary>
        public async Task<bool> NotifyGuideRejectionAsync(
            Guid tourCompanyUserId,
            string tourDetailsTitle,
            string guideFullName,
            string? rejectionReason)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification ONLY
                await _notificationService.CreateGuideRejectionNotificationAsync(
                    tourCompanyUserId, tourDetailsTitle, guideFullName, rejectionReason);

                Console.WriteLine($"Guide rejection notification sent (in-app only) for user {tourCompanyUserId}, tour: {tourDetailsTitle}, guide: {guideFullName}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending guide rejection notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi l·ªùi m·ªùi h·∫øt h·∫°n sau 24h v√† c·∫ßn t√¨m guide th·ªß c√¥ng
        /// OPTIMIZED: Ch·ªâ g·ª≠i in-app notification, kh√¥ng g·ª≠i email
        /// </summary>
        public async Task<bool> NotifyManualGuideSelectionNeededAsync(
            Guid tourCompanyUserId,
            string tourDetailsTitle,
            int expiredInvitationsCount)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification ONLY
                await _notificationService.CreateManualGuideSelectionNotificationAsync(
                    tourCompanyUserId, tourDetailsTitle, expiredInvitationsCount);

                Console.WriteLine($"Manual guide selection notification sent (in-app only) for user {tourCompanyUserId}, tour: {tourDetailsTitle}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending manual guide selection notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi t·∫•t c·∫£ guides kh√¥ng ph·∫£n h·ªìi v√† tour s·∫Øp b·ªã h·ªßy
        /// OPTIMIZED: Ch·ªâ g·ª≠i in-app notification, kh√¥ng g·ª≠i email
        /// </summary>
        public async Task<bool> NotifyTourRiskCancellationAsync(
            Guid tourCompanyUserId,
            string tourDetailsTitle,
            int daysUntilCancellation)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification ONLY
                await _notificationService.CreateTourRiskCancellationNotificationAsync(
                    tourCompanyUserId, tourDetailsTitle, daysUntilCancellation);

                Console.WriteLine($"Tour risk cancellation notification sent (in-app only) for user {tourCompanyUserId}, tour: {tourDetailsTitle}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending tour risk cancellation notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi admin duy·ªát tour details
        /// OPTIMIZED: Ch·ªâ g·ª≠i in-app notification, kh√¥ng g·ª≠i email ƒë·ªÉ gi·∫£m th·ªùi gian ph·∫£n h·ªìi
        /// </summary>
        public async Task<bool> NotifyTourApprovalAsync(
            Guid tourCompanyUserId,
            string tourDetailsTitle,
            string? adminComment = null)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification ONLY
                await _notificationService.CreateNotificationAsync(new DTOs.Request.Notification.CreateNotificationDto
                {
                    UserId = tourCompanyUserId,
                    Title = "‚úÖ Tour ƒë∆∞·ª£c duy·ªát",
                    Message = $"Tour '{tourDetailsTitle}' ƒë√£ ƒë∆∞·ª£c admin duy·ªát v√† c√≥ th·ªÉ b·∫Øt ƒë·∫ßu m·ªùi h∆∞·ªõng d·∫´n vi√™n!",
                    Type = DataAccessLayer.Enums.NotificationType.Tour,
                    Priority = DataAccessLayer.Enums.NotificationPriority.High,
                    Icon = "‚úÖ",
                    ActionUrl = "/tour-company/tours"
                });

                Console.WriteLine($"Tour approval notification sent (in-app only) for user {tourCompanyUserId}, tour: {tourDetailsTitle}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending tour approval notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi admin t·ª´ ch·ªëi tour details
        /// OPTIMIZED: Ch·ªâ g·ª≠i in-app notification, kh√¥ng g·ª≠i email ƒë·ªÉ gi·∫£m th·ªùi gian ph·∫£n h·ªìi
        /// </summary>
        public async Task<bool> NotifyTourRejectionAsync(
            Guid tourCompanyUserId,
            string tourDetailsTitle,
            string rejectionReason)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification ONLY
                await _notificationService.CreateNotificationAsync(new DTOs.Request.Notification.CreateNotificationDto
                {
                    UserId = tourCompanyUserId,
                    Title = "‚ùå Tour b·ªã t·ª´ ch·ªëi",
                    Message = $"Tour '{tourDetailsTitle}' ƒë√£ b·ªã admin t·ª´ ch·ªëi. L√Ω do: {rejectionReason}. Vui l√≤ng ch·ªânh s·ª≠a v√† g·ª≠i l·∫°i.",
                    Type = DataAccessLayer.Enums.NotificationType.Warning,
                    Priority = DataAccessLayer.Enums.NotificationPriority.High,
                    Icon = "‚ùå",
                    ActionUrl = "/tour-company/tours"
                });

                Console.WriteLine($"Tour rejection notification sent (in-app only) for user {tourCompanyUserId}, tour: {tourDetailsTitle}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending tour rejection notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi TourGuide ch·∫•p nh·∫≠n l·ªùi m·ªùi tour
        /// OPTIMIZED: Ch·ªâ g·ª≠i in-app notification, kh√¥ng g·ª≠i email
        /// </summary>
        public async Task<bool> NotifyGuideAcceptanceAsync(
            Guid tourCompanyUserId,
            string tourDetailsTitle,
            string guideFullName,
            string guideEmail,
            DateTime acceptedAt)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification ONLY
                await _notificationService.CreateNotificationAsync(new DTOs.Request.Notification.CreateNotificationDto
                {
                    UserId = tourCompanyUserId,
                    Title = "üéâ H∆∞·ªõng d·∫´n vi√™n ch·∫•p nh·∫≠n!",
                    Message = $"{guideFullName} ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi cho tour '{tourDetailsTitle}'. Tour s·∫µn s√†ng ƒë·ªÉ public!",
                    Type = DataAccessLayer.Enums.NotificationType.TourGuide,
                    Priority = DataAccessLayer.Enums.NotificationPriority.High,
                    Icon = "üéâ",
                    ActionUrl = "/tour-company/tours"
                });

                Console.WriteLine($"Guide acceptance notification sent (in-app only) for user {tourCompanyUserId}, tour: {tourDetailsTitle}, guide: {guideFullName}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending guide acceptance notification: {ex.Message}");
                return false;
            }
        }
    }
}
