using TayNinhTourApi.BusinessLogicLayer.DTOs.Response.TourBooking;
using TayNinhTourApi.BusinessLogicLayer.Services.Interface;
using TayNinhTourApi.BusinessLogicLayer.Utilities;
using TayNinhTourApi.DataAccessLayer.UnitOfWork.Interface;

namespace TayNinhTourApi.BusinessLogicLayer.Services
{
    /// <summary>
    /// Service g·ª≠i th√¥ng b√°o cho TourCompany v·ªÅ c√°c s·ª± ki·ªán booking
    /// Bao g·ªìm c·∫£ email v√† in-app notifications
    /// </summary>
    public class TourCompanyNotificationService : ITourCompanyNotificationService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly EmailSender _emailSender;
        private readonly INotificationService _notificationService;

        public TourCompanyNotificationService(
            IUnitOfWork unitOfWork,
            EmailSender emailSender,
            INotificationService notificationService)
        {
            _unitOfWork = unitOfWork;
            _emailSender = emailSender;
            _notificationService = notificationService;
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi c√≥ booking m·ªõi
        /// </summary>
        public async Task<bool> NotifyNewBookingAsync(Guid tourCompanyUserId, TourBookingDto booking)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                var subject = "Th√¥ng b√°o: C√≥ booking tour m·ªõi";
                var htmlBody = $@"
                    <h2>Ch√†o {user.Name},</h2>
                    <p>B·∫°n c√≥ m·ªôt booking tour m·ªõi v·ªõi th√¥ng tin sau:</p>
                    <ul>
                        <li><strong>M√£ booking:</strong> {booking.BookingCode}</li>
                        <li><strong>Tour:</strong> {booking.TourOperation?.TourTitle}</li>
                        <li><strong>S·ªë kh√°ch:</strong> {booking.NumberOfGuests}</li>
                        <li><strong>T·ªïng ti·ªÅn:</strong> {booking.TotalPrice:N0} VNƒê</li>
                        <li><strong>Ng√†y ƒë·∫∑t:</strong> {booking.BookingDate:dd/MM/yyyy HH:mm}</li>
                        <li><strong>Ng√†y kh·ªüi h√†nh:</strong> {booking.TourOperation?.TourStartDate:dd/MM/yyyy}</li>
                    </ul>
                    <p>Vui l√≤ng ki·ªÉm tra v√† chu·∫©n b·ªã cho tour.</p>
                    <br/>
                    <p>Tr√¢n tr·ªçng,</p>
                    <p>ƒê·ªôi ng≈© Tay Ninh Tour</p>";

                // üîî T·∫°o in-app notification
                await _notificationService.CreateNewBookingNotificationAsync(tourCompanyUserId, booking);

                return await SendEmailNotificationAsync(tourCompanyUserId, subject, htmlBody);
            }
            catch (Exception ex)
            {
                // Log error but don't throw to avoid breaking the main flow
                Console.WriteLine($"Error sending new booking notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi tour b·ªã h·ªßy t·ª± ƒë·ªông
        /// </summary>
        public async Task<bool> NotifyTourCancellationAsync(
            Guid tourCompanyUserId, 
            List<TourBookingDto> affectedBookings, 
            string tourTitle, 
            DateTime tourStartDate, 
            string reason)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                var totalRefundAmount = affectedBookings.Sum(b => b.TotalPrice);
                var bookingsList = string.Join("", affectedBookings.Select(b => 
                    $"<li>{b.BookingCode} - {b.NumberOfGuests} kh√°ch - {b.TotalPrice:N0} VNƒê</li>"));

                var subject = $"Th√¥ng b√°o: Tour '{tourTitle}' ƒë√£ b·ªã h·ªßy t·ª± ƒë·ªông";
                var htmlBody = $@"
                    <h2>Ch√†o {user.Name},</h2>
                    <p>Tour <strong>'{tourTitle}'</strong> d·ª± ki·∫øn kh·ªüi h√†nh ng√†y <strong>{tourStartDate:dd/MM/yyyy}</strong> ƒë√£ b·ªã h·ªßy t·ª± ƒë·ªông.</p>
                    <p><strong>L√Ω do:</strong> {reason}</p>
                    
                    <h3>C√°c booking b·ªã ·∫£nh h∆∞·ªüng:</h3>
                    <ul>
                        {bookingsList}
                    </ul>
                    
                    <p><strong>T·ªïng s·ªë ti·ªÅn c·∫ßn ho√†n:</strong> {totalRefundAmount:N0} VNƒê</p>
                    <p>S·ªë ti·ªÅn n√†y ƒë√£ ƒë∆∞·ª£c tr·ª´ kh·ªèi revenue hold c·ªßa b·∫°n ƒë·ªÉ chu·∫©n b·ªã ho√†n ti·ªÅn cho kh√°ch h√†ng.</p>
                    
                    <p>Ch√∫ng t√¥i ƒë√£ g·ª≠i email th√¥ng b√°o h·ªßy tour cho t·∫•t c·∫£ kh√°ch h√†ng b·ªã ·∫£nh h∆∞·ªüng.</p>
                    
                    <br/>
                    <p>Tr√¢n tr·ªçng,</p>
                    <p>ƒê·ªôi ng≈© Tay Ninh Tour</p>";

                // üîî T·∫°o in-app notification
                await _notificationService.CreateTourCancellationNotificationAsync(
                    tourCompanyUserId, affectedBookings, tourTitle, tourStartDate, reason);

                return await SendEmailNotificationAsync(tourCompanyUserId, subject, htmlBody);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending tour cancellation notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi kh√°ch h√†ng h·ªßy booking
        /// </summary>
        public async Task<bool> NotifyBookingCancellationAsync(Guid tourCompanyUserId, TourBookingDto booking, string? reason)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                var subject = "Th√¥ng b√°o: Kh√°ch h√†ng ƒë√£ h·ªßy booking";
                var htmlBody = $@"
                    <h2>Ch√†o {user.Name},</h2>
                    <p>Kh√°ch h√†ng ƒë√£ h·ªßy booking v·ªõi th√¥ng tin sau:</p>
                    <ul>
                        <li><strong>M√£ booking:</strong> {booking.BookingCode}</li>
                        <li><strong>Tour:</strong> {booking.TourOperation?.TourTitle}</li>
                        <li><strong>S·ªë kh√°ch:</strong> {booking.NumberOfGuests}</li>
                        <li><strong>T·ªïng ti·ªÅn:</strong> {booking.TotalPrice:N0} VNƒê</li>
                        <li><strong>Ng√†y ƒë·∫∑t:</strong> {booking.BookingDate:dd/MM/yyyy HH:mm}</li>
                        <li><strong>Ng√†y h·ªßy:</strong> {booking.CancelledDate:dd/MM/yyyy HH:mm}</li>
                        <li><strong>L√Ω do h·ªßy:</strong> {reason ?? "Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ"}</li>
                    </ul>
                    <p>Slot ƒë√£ ƒë∆∞·ª£c gi·∫£i ph√≥ng v√† c√≥ th·ªÉ nh·∫≠n booking m·ªõi.</p>
                    <br/>
                    <p>Tr√¢n tr·ªçng,</p>
                    <p>ƒê·ªôi ng≈© Tay Ninh Tour</p>";

                // üîî T·∫°o in-app notification
                await _notificationService.CreateBookingCancellationNotificationAsync(tourCompanyUserId, booking, reason);

                return await SendEmailNotificationAsync(tourCompanyUserId, subject, htmlBody);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending booking cancellation notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi ti·ªÅn ƒë∆∞·ª£c chuy·ªÉn t·ª´ revenue hold sang wallet
        /// </summary>
        public async Task<bool> NotifyRevenueTransferAsync(
            Guid tourCompanyUserId, 
            decimal amount, 
            string tourTitle, 
            DateTime tourCompletedDate)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                var subject = "Th√¥ng b√°o: Ti·ªÅn tour ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o v√≠";
                var htmlBody = $@"
                    <h2>Ch√†o {user.Name},</h2>
                    <p>Ti·ªÅn t·ª´ tour <strong>'{tourTitle}'</strong> ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o v√≠ c·ªßa b·∫°n.</p>
                    <ul>
                        <li><strong>S·ªë ti·ªÅn:</strong> {amount:N0} VNƒê</li>
                        <li><strong>Tour:</strong> {tourTitle}</li>
                        <li><strong>Ng√†y ho√†n th√†nh tour:</strong> {tourCompletedDate:dd/MM/yyyy}</li>
                        <li><strong>Ng√†y chuy·ªÉn ti·ªÅn:</strong> {DateTime.UtcNow:dd/MM/yyyy HH:mm}</li>
                    </ul>
                    <p>Ti·ªÅn ƒë√£ ƒë∆∞·ª£c chuy·ªÉn t·ª´ revenue hold sang wallet v√† b·∫°n c√≥ th·ªÉ r√∫t ti·ªÅn.</p>
                    <br/>
                    <p>Tr√¢n tr·ªçng,</p>
                    <p>ƒê·ªôi ng≈© Tay Ninh Tour</p>";

                return await SendEmailNotificationAsync(tourCompanyUserId, subject, htmlBody);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending revenue transfer notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i email th√¥ng b√°o cho TourCompany
        /// </summary>
        public async Task<bool> SendEmailNotificationAsync(Guid tourCompanyUserId, string subject, string htmlBody)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                await _emailSender.SendEmailAsync(user.Email, user.Name, subject, htmlBody);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending email notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi TourGuide t·ª´ ch·ªëi l·ªùi m·ªùi
        /// </summary>
        public async Task<bool> NotifyGuideRejectionAsync(
            Guid tourCompanyUserId,
            string tourDetailsTitle,
            string guideFullName,
            string? rejectionReason)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification
                await _notificationService.CreateGuideRejectionNotificationAsync(
                    tourCompanyUserId, tourDetailsTitle, guideFullName, rejectionReason);

                // üìß G·ª≠i email notification
                var subject = $"Th√¥ng b√°o: H∆∞·ªõng d·∫´n vi√™n t·ª´ ch·ªëi tour '{tourDetailsTitle}'";
                var htmlBody = $@"
                    <h2>Ch√†o {user.Name},</h2>
                    <p>H∆∞·ªõng d·∫´n vi√™n <strong>{guideFullName}</strong> ƒë√£ t·ª´ ch·ªëi l·ªùi m·ªùi cho tour <strong>'{tourDetailsTitle}'</strong>.</p>
                    
                    {(!string.IsNullOrEmpty(rejectionReason) ? $@"
                    <h3>L√Ω do t·ª´ ch·ªëi:</h3>
                    <div style='background-color: #f5f5f5; padding: 15px; border-left: 4px solid #ff6b6b; margin: 10px 0;'>
                        <p><em>{rejectionReason}</em></p>
                    </div>" : "")}
                    
                    <h3>H√†nh ƒë·ªông ti·∫øp theo:</h3>
                    <ul>
                        <li>M·ªùi h∆∞·ªõng d·∫´n vi√™n kh√°c th·ªß c√¥ng</li>
                        <li>Ki·ªÉm tra v√† ƒëi·ªÅu ch·ªânh y√™u c·∫ßu k·ªπ nƒÉng n·∫øu c·∫ßn</li>
                        <li>Xem x√©t tƒÉng m·ª©c ph√≠ ho·∫∑c ƒëi·ªÅu ki·ªán tour</li>
                    </ul>
                    
                    <p><strong>G·ª£i √Ω:</strong> ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng ƒë·ªÉ xem danh s√°ch h∆∞·ªõng d·∫´n vi√™n c√≥ s·∫µn v√† g·ª≠i l·ªùi m·ªùi th·ªß c√¥ng.</p>
                    
                    <br/>
                    <p>Tr√¢n tr·ªçng,</p>
                    <p>ƒê·ªôi ng≈© Tay Ninh Tour</p>";

                return await SendEmailNotificationAsync(tourCompanyUserId, subject, htmlBody);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending guide rejection notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi l·ªùi m·ªùi h·∫øt h·∫°n sau 24h v√† c·∫ßn t√¨m guide th·ªß c√¥ng
        /// </summary>
        public async Task<bool> NotifyManualGuideSelectionNeededAsync(
            Guid tourCompanyUserId,
            string tourDetailsTitle,
            int expiredInvitationsCount)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification
                await _notificationService.CreateManualGuideSelectionNotificationAsync(
                    tourCompanyUserId, tourDetailsTitle, expiredInvitationsCount);

                // üìß G·ª≠i email notification
                var subject = $"C·∫ßn h√†nh ƒë·ªông: Tour '{tourDetailsTitle}' ch∆∞a c√≥ h∆∞·ªõng d·∫´n vi√™n";
                var htmlBody = $@"
                    <h2>Ch√†o {user.Name},</h2>
                    <p>Tour <strong>'{tourDetailsTitle}'</strong> c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang ch·∫ø ƒë·ªô t√¨m ki·∫øm h∆∞·ªõng d·∫´n vi√™n th·ªß c√¥ng.</p>
                    
                    <div style='background-color: #fff3cd; padding: 15px; border-left: 4px solid #ffc107; margin: 15px 0;'>
                        <h3 style='margin-top: 0; color: #856404;'>‚ö†Ô∏è T√¨nh tr·∫°ng hi·ªán t·∫°i:</h3>
                        <ul style='margin-bottom: 0;'>
                            <li><strong>{expiredInvitationsCount}</strong> l·ªùi m·ªùi ƒë√£ h·∫øt h·∫°n (24 gi·ªù)</li>
                            <li>Ch∆∞a c√≥ h∆∞·ªõng d·∫´n vi√™n n√†o ch·∫•p nh·∫≠n</li>
                            <li>C·∫ßn t√¨m h∆∞·ªõng d·∫´n vi√™n th·ªß c√¥ng ngay</li>
                        </ul>
                    </div>
                    
                    <h3>üéØ H√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán:</h3>
                    <ol>
                        <li><strong>ƒêƒÉng nh·∫≠p h·ªá th·ªëng</strong> ƒë·ªÉ xem danh s√°ch h∆∞·ªõng d·∫´n vi√™n</li>
                        <li><strong>G·ª≠i l·ªùi m·ªùi th·ªß c√¥ng</strong> cho c√°c h∆∞·ªõng d·∫´n vi√™n ph√π h·ª£p</li>
                        <li><strong>Xem x√©t ƒëi·ªÅu ch·ªânh:</strong>
                            <ul>
                                <li>Y√™u c·∫ßu k·ªπ nƒÉng</li>
                                <li>M·ª©c ph√≠ tour</li>
                                <li>Th·ªùi gian tour</li>
                            </ul>
                        </li>
                    </ol>
                    
                    <div style='background-color: #d4edda; padding: 15px; border-left: 4px solid #28a745; margin: 15px 0;'>
                        <p style='margin: 0;'><strong>üí° L∆∞u √Ω:</strong> N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c h∆∞·ªõng d·∫´n vi√™n trong <strong>5 ng√†y</strong>, tour s·∫Ω b·ªã h·ªßy t·ª± ƒë·ªông.</p>
                    </div>
                    
                    <br/>
                    <p>Tr√¢n tr·ªçng,</p>
                    <p>ƒê·ªôi ng≈© Tay Ninh Tour</p>";

                return await SendEmailNotificationAsync(tourCompanyUserId, subject, htmlBody);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending manual guide selection notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi t·∫•t c·∫£ guides kh√¥ng ph·∫£n h·ªìi v√† tour s·∫Øp b·ªã h·ªßy
        /// </summary>
        public async Task<bool> NotifyTourRiskCancellationAsync(
            Guid tourCompanyUserId,
            string tourDetailsTitle,
            int daysUntilCancellation)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification
                await _notificationService.CreateTourRiskCancellationNotificationAsync(
                    tourCompanyUserId, tourDetailsTitle, daysUntilCancellation);

                // üìß G·ª≠i email notification
                var subject = $"üö® KH·∫®N C·∫§P: Tour '{tourDetailsTitle}' s·∫Øp b·ªã h·ªßy";
                var htmlBody = $@"
                    <h2>Ch√†o {user.Name},</h2>
                    
                    <div style='background-color: #f8d7da; padding: 20px; border-left: 4px solid #dc3545; margin: 15px 0;'>
                        <h3 style='margin-top: 0; color: #721c24;'>üö® C·∫¢NH B√ÅO KH·∫®N C·∫§P</h3>
                        <p style='font-size: 16px; margin-bottom: 0;'>
                            Tour <strong>'{tourDetailsTitle}'</strong> s·∫Ω b·ªã <strong>H·ª¶Y T·ª∞ ƒê·ªòNG</strong> trong <strong>{daysUntilCancellation} ng√†y</strong> n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c h∆∞·ªõng d·∫´n vi√™n!
                        </p>
                    </div>
                    
                    <h3>üìä T√¨nh tr·∫°ng hi·ªán t·∫°i:</h3>
                    <ul>
                        <li>‚ùå Ch∆∞a c√≥ h∆∞·ªõng d·∫´n vi√™n ch·∫•p nh·∫≠n</li>
                        <li>‚è∞ ƒê√£ h·∫øt th·ªùi gian ch·ªù t·ª± ƒë·ªông</li>
                        <li>üïí C√≤n <strong>{daysUntilCancellation} ng√†y</strong> tr∆∞·ªõc khi h·ªßy</li>
                    </ul>
                    
                    <h3>‚ö° H√ÄNH ƒê·ªòNG NGAY L·∫¨P T·ª®C:</h3>
                    <ol style='background-color: #fff3cd; padding: 15px; border-radius: 5px;'>
                        <li><strong>ƒêƒÉng nh·∫≠p h·ªá th·ªëng ngay</strong></li>
                        <li><strong>G·ª≠i l·ªùi m·ªùi th·ªß c√¥ng</strong> cho nhi·ªÅu h∆∞·ªõng d·∫´n vi√™n</li>
                        <li><strong>Li√™n h·ªá hotline:</strong> 1900-xxx-xxx ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£</li>
                        <li><strong>Xem x√©t gi·∫£m y√™u c·∫ßu</strong> ho·∫∑c tƒÉng ph√≠ ƒë·ªÉ thu h√∫t guide</li>
                    </ol>
                    
                    <div style='background-color: #f8d7da; padding: 15px; border-radius: 5px; margin: 20px 0;'>
                        <h4 style='margin-top: 0; color: #721c24;'>‚ö†Ô∏è H·∫≠u qu·∫£ n·∫øu tour b·ªã h·ªßy:</h4>
                        <ul style='margin-bottom: 0;'>
                            <li>T·∫•t c·∫£ booking s·∫Ω b·ªã h·ªßy</li>
                            <li>Kh√°ch h√†ng s·∫Ω ƒë∆∞·ª£c ho√†n ti·ªÅn</li>
                            <li>·∫¢nh h∆∞·ªüng ƒë·∫øn uy t√≠n c√¥ng ty</li>
                            <li>M·∫•t c∆° h·ªôi kinh doanh</li>
                        </ul>
                    </div>
                    
                    <p style='font-size: 16px; font-weight: bold; color: #dc3545;'>
                        üìû C·∫ßn h·ªó tr·ª£ kh·∫©n c·∫•p? G·ªçi ngay: <a href='tel:1900-xxx-xxx'>1900-xxx-xxx</a>
                    </p>
                    
                    <br/>
                    <p>Tr√¢n tr·ªçng,</p>
                    <p>ƒê·ªôi ng≈© Tay Ninh Tour</p>";

                return await SendEmailNotificationAsync(tourCompanyUserId, subject, htmlBody);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending tour risk cancellation notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi admin duy·ªát tour details
        /// </summary>
        public async Task<bool> NotifyTourApprovalAsync(
            Guid tourCompanyUserId,
            string tourDetailsTitle,
            string? adminComment = null)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification
                await _notificationService.CreateNotificationAsync(new DTOs.Request.Notification.CreateNotificationDto
                {
                    UserId = tourCompanyUserId,
                    Title = "‚úÖ Tour ƒë∆∞·ª£c duy·ªát",
                    Message = $"Tour '{tourDetailsTitle}' ƒë√£ ƒë∆∞·ª£c admin duy·ªát v√† c√≥ th·ªÉ b·∫Øt ƒë·∫ßu m·ªùi h∆∞·ªõng d·∫´n vi√™n!",
                    Type = DataAccessLayer.Enums.NotificationType.Tour,
                    Priority = DataAccessLayer.Enums.NotificationPriority.High,
                    Icon = "‚úÖ",
                    ActionUrl = "/tours/approved"
                });

                // üìß G·ª≠i email notification
                var subject = $"üéâ Ch√∫c m·ª´ng! Tour '{tourDetailsTitle}' ƒë√£ ƒë∆∞·ª£c duy·ªát";
                var htmlBody = $@"
                    <h2>Ch√†o {user.Name},</h2>
                    
                    <div style='background-color: #d4edda; padding: 20px; border-left: 4px solid #28a745; margin: 15px 0;'>
                        <h3 style='margin-top: 0; color: #155724;'>üéâ CH√öC M·ª™NG!</h3>
                        <p style='font-size: 16px; margin-bottom: 0;'>
                            Tour <strong>'{tourDetailsTitle}'</strong> ƒë√£ ƒë∆∞·ª£c admin <strong>DUY·ªÜT</strong> v√† s·∫µn s√†ng ho·∫°t ƒë·ªông!
                        </p>
                    </div>
                    
                    {(!string.IsNullOrEmpty(adminComment) ? $@"
                    <h3>üí¨ Nh·∫≠n x√©t t·ª´ admin:</h3>
                    <div style='background-color: #f8f9fa; padding: 15px; border-left: 4px solid #6c757d; margin: 10px 0;'>
                        <p><em>{adminComment}</em></p>
                    </div>" : "")}
                    
                    <h3>üöÄ B∆∞·ªõc ti·∫øp theo:</h3>
                    <ol>
                        <li><strong>Ki·ªÉm tra l·ªùi m·ªùi h∆∞·ªõng d·∫´n vi√™n:</strong> H·ªá th·ªëng ƒë√£ t·ª± ƒë·ªông g·ª≠i l·ªùi m·ªùi cho c√°c h∆∞·ªõng d·∫´n vi√™n ph√π h·ª£p</li>
                        <li><strong>Theo d√µi ph·∫£n h·ªìi:</strong> Ch·ªù h∆∞·ªõng d·∫´n vi√™n ch·∫•p nh·∫≠n l·ªùi m·ªùi</li>
                        <li><strong>Chu·∫©n b·ªã tour:</strong> Sau khi c√≥ h∆∞·ªõng d·∫´n vi√™n, tour s·∫Ω s·∫µn s√†ng nh·∫≠n booking</li>
                        <li><strong>Marketing:</strong> B·∫Øt ƒë·∫ßu qu·∫£ng b√° tour ƒë·ªÉ thu h√∫t kh√°ch h√†ng</li>
                    </ol>
                    
                    <div style='background-color: #cce5ff; padding: 15px; border-radius: 5px; margin: 20px 0;'>
                        <h4 style='margin-top: 0; color: #004085;'>üìã Th√¥ng tin quan tr·ªçng:</h4>
                        <ul style='margin-bottom: 0;'>
                            <li>Tour s·∫Ω t·ª± ƒë·ªông chuy·ªÉn sang tr·∫°ng th√°i 'Public' sau khi c√≥ h∆∞·ªõng d·∫´n vi√™n</li>
                            <li>Kh√°ch h√†ng c√≥ th·ªÉ ƒë·∫∑t booking ngay khi tour ·ªü tr·∫°ng th√°i 'Public'</li>
                            <li>B·∫°n s·∫Ω nh·∫≠n th√¥ng b√°o khi c√≥ booking m·ªõi</li>
                        </ul>
                    </div>
                    
                    <p style='text-align: center; margin: 30px 0;'>
                        <a href='#' style='background-color: #28a745; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; font-weight: bold;'>
                            üéØ Xem tr·∫°ng th√°i tour
                        </a>
                    </p>
                    
                    <br/>
                    <p>Ch√∫c b·∫°n kinh doanh th√†nh c√¥ng!</p>
                    <p>Tr√¢n tr·ªçng,</p>
                    <p>ƒê·ªôi ng≈© Tay Ninh Tour</p>";

                return await SendEmailNotificationAsync(tourCompanyUserId, subject, htmlBody);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending tour approval notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi admin t·ª´ ch·ªëi tour details
        /// </summary>
        public async Task<bool> NotifyTourRejectionAsync(
            Guid tourCompanyUserId,
            string tourDetailsTitle,
            string rejectionReason)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification
                await _notificationService.CreateNotificationAsync(new DTOs.Request.Notification.CreateNotificationDto
                {
                    UserId = tourCompanyUserId,
                    Title = "‚ùå Tour b·ªã t·ª´ ch·ªëi",
                    Message = $"Tour '{tourDetailsTitle}' ƒë√£ b·ªã admin t·ª´ ch·ªëi. Vui l√≤ng ki·ªÉm tra l√Ω do v√† ch·ªânh s·ª≠a l·∫°i.",
                    Type = DataAccessLayer.Enums.NotificationType.Warning,
                    Priority = DataAccessLayer.Enums.NotificationPriority.High,
                    Icon = "‚ùå",
                    ActionUrl = "/tours/rejected"
                });

                // üìß G·ª≠i email notification
                var subject = $"‚ùå Tour '{tourDetailsTitle}' c·∫ßn ch·ªânh s·ª≠a";
                var htmlBody = $@"
                    <h2>Ch√†o {user.Name},</h2>
                    
                    <div style='background-color: #f8d7da; padding: 20px; border-left: 4px solid #dc3545; margin: 15px 0;'>
                        <h3 style='margin-top: 0; color: #721c24;'>‚ùå TOUR C·∫¶N CH·ªàNH S·ª¨A</h3>
                        <p style='font-size: 16px; margin-bottom: 0;'>
                            Tour <strong>'{tourDetailsTitle}'</strong> ch∆∞a ƒë∆∞·ª£c duy·ªát v√† c·∫ßn ch·ªânh s·ª≠a theo y√™u c·∫ßu.
                        </p>
                    </div>
                    
                    <h3>üìù L√Ω do t·ª´ admin:</h3>
                    <div style='background-color: #fff3cd; padding: 15px; border-left: 4px solid #ffc107; margin: 10px 0;'>
                        <p style='font-weight: bold; color: #856404;'>{rejectionReason}</p>
                    </div>
                    
                    <h3>üîß H√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán:</h3>
                    <ol>
                        <li><strong>ƒê·ªçc k·ªπ ph·∫£n h·ªìi:</strong> Hi·ªÉu r√µ nh·ªØng ƒëi·ªÉm c·∫ßn ch·ªânh s·ª≠a</li>
                        <li><strong>Ch·ªânh s·ª≠a tour:</strong> C·∫≠p nh·∫≠t th√¥ng tin theo y√™u c·∫ßu c·ªßa admin</li>
                        <li><strong>Ki·ªÉm tra l·∫°i:</strong> ƒê·∫£m b·∫£o tour ƒë√°p ·ª©ng ƒë·∫ßy ƒë·ªß y√™u c·∫ßu</li>
                        <li><strong>G·ª≠i l·∫°i duy·ªát:</strong> Submit tour ƒë·ªÉ admin xem x√©t l·∫°i</li>
                    </ol>
                    
                    <div style='background-color: #e2f3ff; padding: 15px; border-radius: 5px; margin: 20px 0;'>
                        <h4 style='margin-top: 0; color: #004085;'>üí° G·ª£i √Ω c·∫£i thi·ªán:</h4>
                        <ul style='margin-bottom: 0;'>
                            <li>Cung c·∫•p m√¥ t·∫£ chi ti·∫øt v√† r√µ r√†ng v·ªÅ tour</li>
                            <li>ƒê·∫£m b·∫£o h√¨nh ·∫£nh ch·∫•t l∆∞·ª£ng cao v√† ph√π h·ª£p</li>
                            <li>Ki·ªÉm tra th√¥ng tin li√™n h·ªá v√† ƒë·ªãa ƒëi·ªÉm ch√≠nh x√°c</li>
                            <li>Tu√¢n th·ªß c√°c quy ƒë·ªãnh v√† ch√≠nh s√°ch c·ªßa platform</li>
                        </ul>
                    </div>
                    
                    <p style='text-align: center; margin: 30px 0;'>
                        <a href='#' style='background-color: #ffc107; color: #212529; padding: 12px 24px; text-decoration: none; border-radius: 5px; font-weight: bold;'>
                            ‚úèÔ∏è Ch·ªânh s·ª≠a tour ngay
                        </a>
                    </p>
                    
                    <div style='background-color: #d1ecf1; padding: 15px; border-radius: 5px; margin: 20px 0;'>
                        <p style='margin: 0;'><strong>ü§ù C·∫ßn h·ªó tr·ª£?</strong> Li√™n h·ªá team support qua email: support@tayninhour.com ho·∫∑c hotline: 1900-xxx-xxx</p>
                    </div>
                    
                    <br/>
                    <p>Ch√∫ng t√¥i mong mu·ªën h·ªó tr·ª£ b·∫°n t·∫°o ra nh·ªØng tour tuy·ªát v·ªùi!</p>
                    <p>Tr√¢n tr·ªçng,</p>
                    <p>ƒê·ªôi ng≈© Tay Ninh Tour</p>";

                return await SendEmailNotificationAsync(tourCompanyUserId, subject, htmlBody);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending tour rejection notification: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o khi TourGuide ch·∫•p nh·∫≠n l·ªùi m·ªùi tour
        /// </summary>
        public async Task<bool> NotifyGuideAcceptanceAsync(
            Guid tourCompanyUserId,
            string tourDetailsTitle,
            string guideFullName,
            string guideEmail,
            DateTime acceptedAt)
        {
            try
            {
                var user = await _unitOfWork.UserRepository.GetByIdAsync(tourCompanyUserId);
                if (user == null) return false;

                // üîî T·∫°o in-app notification
                await _notificationService.CreateNotificationAsync(new DTOs.Request.Notification.CreateNotificationDto
                {
                    UserId = tourCompanyUserId,
                    Title = "üéâ H∆∞·ªõng d·∫´n vi√™n ch·∫•p nh·∫≠n!",
                    Message = $"{guideFullName} ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi cho tour '{tourDetailsTitle}'. Tour s·∫µn s√†ng ƒë·ªÉ public!",
                    Type = DataAccessLayer.Enums.NotificationType.TourGuide,
                    Priority = DataAccessLayer.Enums.NotificationPriority.High,
                    Icon = "üéâ",
                    ActionUrl = "/tours/ready-to-public"
                });

                // üìß G·ª≠i email notification
                var subject = $"üéâ Tuy·ªát v·ªùi! H∆∞·ªõng d·∫´n vi√™n ƒë√£ ch·∫•p nh·∫≠n tour '{tourDetailsTitle}'";
                var htmlBody = $@"
                    <h2>Ch√†o {user.Name},</h2>
                    
                    <div style='background-color: #d4edda; padding: 20px; border-left: 4px solid #28a745; margin: 15px 0;'>
                        <h3 style='margin-top: 0; color: #155724;'>üéâ TIN TUY·ªÜT V·ªúI!</h3>
                        <p style='font-size: 16px; margin-bottom: 0;'>
                            H∆∞·ªõng d·∫´n vi√™n <strong>{guideFullName}</strong> ƒë√£ <strong>CH·∫§P NH·∫¨N</strong> l·ªùi m·ªùi cho tour <strong>'{tourDetailsTitle}'</strong>!
                        </p>
                    </div>
                    
                    <h3>üë®‚Äçüè´ Th√¥ng tin h∆∞·ªõng d·∫´n vi√™n:</h3>
                    <div style='background-color: #f8f9fa; padding: 15px; border-left: 4px solid #007bff; margin: 10px 0;'>
                        <ul style='margin: 0; list-style: none; padding: 0;'>
                            <li><strong>üôã‚Äç‚ôÇÔ∏è T√™n:</strong> {guideFullName}</li>
                            <li><strong>üìß Email:</strong> {guideEmail}</li>
                            <li><strong>‚è∞ Ch·∫•p nh·∫≠n l√∫c:</strong> {acceptedAt:dd/MM/yyyy HH:mm}</li>
                        </ul>
                    </div>
                    
                    <h3>üöÄ B∆∞·ªõc ti·∫øp theo:</h3>
                    <div style='background-color: #fff3cd; padding: 15px; border-radius: 5px; margin: 15px 0;'>
                        <ol style='margin: 0;'>
                            <li><strong>‚úÖ X√°c nh·∫≠n th√¥ng tin:</strong> Li√™n h·ªá v·ªõi h∆∞·ªõng d·∫´n vi√™n ƒë·ªÉ x√°c nh·∫≠n chi ti·∫øt tour</li>
                            <li><strong>üìÖ L√™n l·ªãch meeting:</strong> Th·∫£o lu·∫≠n v·ªÅ k·∫ø ho·∫°ch c·ª• th·ªÉ cho tour</li>
                            <li><strong>üåê K√≠ch ho·∫°t Public:</strong> Tour s·∫µn s√†ng ƒë·ªÉ nh·∫≠n booking t·ª´ kh√°ch h√†ng</li>
                            <li><strong>üì¢ Marketing:</strong> B·∫Øt ƒë·∫ßu qu·∫£ng b√° tour ƒë·ªÉ thu h√∫t kh√°ch h√†ng</li>
                        </ol>
                    </div>
                    
                    <div style='background-color: #e7f3ff; padding: 15px; border-radius: 5px; margin: 20px 0;'>
                        <h4 style='margin-top: 0; color: #004085;'>üí° G·ª£i √Ω th√†nh c√¥ng:</h4>
                        <ul style='margin-bottom: 0;'>
                            <li><strong>Giao ti·∫øp s·ªõm:</strong> Li√™n h·ªá ngay v·ªõi h∆∞·ªõng d·∫´n vi√™n ƒë·ªÉ t·∫°o relationship t·ªët</li>
                            <li><strong>Chu·∫©n b·ªã k·ªπ:</strong> Chia s·∫ª t√†i li·ªáu chi ti·∫øt v·ªÅ tour v√† kh√°ch h√†ng</li>
                            <li><strong>Feedback loop:</strong> Thi·∫øt l·∫≠p k√™nh communication th∆∞·ªùng xuy√™n</li>
                            <li><strong>Backup plan:</strong> C√≥ k·∫ø ho·∫°ch d·ª± ph√≤ng cho c√°c t√¨nh hu·ªëng b·∫•t ng·ªù</li>
                        </ul>
                    </div>
                    
                    <div style='text-align: center; margin: 30px 0;'>
                        <a href='mailto:{guideEmail}' style='background-color: #28a745; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; font-weight: bold; margin-right: 10px;'>
                            üìß Li√™n h·ªá h∆∞·ªõng d·∫´n vi√™n
                        </a>
                        <a href='#' style='background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; font-weight: bold;'>
                            üåê K√≠ch ho·∫°t Public Tour
                        </a>
                    </div>
                    
                    <div style='background-color: #d1ecf1; padding: 15px; border-radius: 5px; margin: 20px 0;'>
                        <p style='margin: 0;'><strong>üìû C·∫ßn h·ªó tr·ª£?</strong> Li√™n h·ªá team support ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v·ªÅ vi·ªác qu·∫£n l√Ω tour v√† h∆∞·ªõng d·∫´n vi√™n.</p>
                    </div>
                    
                    <br/>
                    <p>Ch√∫c b·∫°n c√≥ m·ªôt tour th√†nh c√¥ng v√† ƒë√°ng nh·ªõ!</p>
                    <p>Tr√¢n tr·ªçng,</p>
                    <p>ƒê·ªôi ng≈© Tay Ninh Tour</p>";

                return await SendEmailNotificationAsync(tourCompanyUserId, subject, htmlBody);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending guide acceptance notification: {ex.Message}");
                return false;
            }
        }
    }
}
