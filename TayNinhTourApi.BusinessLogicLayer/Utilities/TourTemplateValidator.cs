using TayNinhTourApi.BusinessLogicLayer.DTOs.Request.TourCompany;
using TayNinhTourApi.BusinessLogicLayer.DTOs.Response.TourCompany;
using TayNinhTourApi.DataAccessLayer.Entities;
using TayNinhTourApi.DataAccessLayer.Enums;
using TayNinhTourApi.DataAccessLayer.Utilities;

namespace TayNinhTourApi.BusinessLogicLayer.Utilities
{
    /// <summary>
    /// Utility class cho validation business logic c·ªßa TourTemplate
    /// </summary>
    public static class TourTemplateValidator
    {
        /// <summary>
        /// Validate tour template creation request
        /// </summary>
        public static ResponseValidationDto ValidateCreateRequest(RequestCreateTourTemplateDto request)
        {
            var result = new ResponseValidationDto
            {
                IsValid = true,
                StatusCode = 200
            };

            // Title validation
            if (string.IsNullOrWhiteSpace(request.Title))
            {
                AddFieldError(result, nameof(request.Title), "T√™n template l√† b·∫Øt bu·ªôc");
            }
            else if (request.Title.Length > 200)
            {
                AddFieldError(result, nameof(request.Title), "T√™n template kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 200 k√Ω t·ª±");
            }

            // Location validation
            if (string.IsNullOrWhiteSpace(request.StartLocation))
            {
                AddFieldError(result, nameof(request.StartLocation), "ƒêi·ªÉm b·∫Øt ƒë·∫ßu l√† b·∫Øt bu·ªôc");
            }

            if (string.IsNullOrWhiteSpace(request.EndLocation))
            {
                AddFieldError(result, nameof(request.EndLocation), "ƒêi·ªÉm k·∫øt th√∫c l√† b·∫Øt bu·ªôc");
            }

            // Month validation
            if (request.Month < 1 || request.Month > 12)
            {
                AddFieldError(result, nameof(request.Month), "Th√°ng ph·∫£i t·ª´ 1 ƒë·∫øn 12");
            }

            // Year validation
            if (request.Year < 2024 || request.Year > 2030)
            {
                AddFieldError(result, nameof(request.Year), "NƒÉm ph·∫£i t·ª´ 2024 ƒë·∫øn 2030");
            }

            // ScheduleDay validation (Saturday OR Sunday only)
            var scheduleValidation = TourTemplateScheduleValidator.ValidateScheduleDay(request.ScheduleDays);
            if (!scheduleValidation.IsValid)
            {
                AddFieldError(result, nameof(request.ScheduleDays), scheduleValidation.ErrorMessage ?? "Ch·ªâ ƒë∆∞·ª£c ch·ªçn Th·ª© 7 ho·∫∑c Ch·ªß nh·∫≠t");
            }

            // Validate first slot date according to new business rules
            var currentTime = VietnamTimeZoneUtility.GetVietnamNow();
            var firstSlotValidation = ValidateFirstSlotDate(currentTime, request.Month, request.Year);
            if (!firstSlotValidation.IsValid)
            {
                AddFieldError(result, "FirstSlotDate", firstSlotValidation.ErrorMessage);
            }

            // Set validation result
            result.IsValid = !result.FieldErrors.Any();
            if (!result.IsValid)
            {
                result.StatusCode = 400;
                result.Message = "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá - Vui l√≤ng ki·ªÉm tra v√† s·ª≠a c√°c l·ªói sau";
                result.ValidationErrors = result.FieldErrors.SelectMany(x => x.Value).ToList();
                
                // Add helpful guidance
                var vietnamTime = VietnamTimeZoneUtility.GetVietnamNow();
                result.ValidationErrors.Add("üí° H∆Ø·ªöNG D·∫™N:");
                result.ValidationErrors.Add($"‚Ä¢ Th√°ng hi·ªán t·∫°i: {vietnamTime.Month}/{vietnamTime.Year} - KH√îNG th·ªÉ ch·ªçn");
                result.ValidationErrors.Add($"‚Ä¢ Th√°ng k·∫ø ti·∫øp: {vietnamTime.AddMonths(1).Month}/{vietnamTime.AddMonths(1).Year} - C√≥ th·ªÉ ch·ªçn n·∫øu ƒë·ªß 30 ng√†y");
                result.ValidationErrors.Add($"‚Ä¢ Th√°ng an to√†n: {vietnamTime.AddMonths(2).Month}/{vietnamTime.AddMonths(2).Year} - Lu√¥n c√≥ th·ªÉ ch·ªçn");
                result.ValidationErrors.Add("‚Ä¢ Ch·ªâ ƒë∆∞·ª£c ch·ªçn Saturday HO·∫∂C Sunday (kh√¥ng ph·∫£i c·∫£ hai)");
                result.ValidationErrors.Add("‚Ä¢ V√≠ d·ª• JSON h·ª£p l·ªá: {\"month\": " + vietnamTime.AddMonths(2).Month + ", \"year\": " + vietnamTime.AddMonths(2).Year + ", \"scheduleDays\": \"Saturday\"}");
            }

            return result;
        }

        /// <summary>
        /// Validate tour template update request
        /// </summary>
        public static ResponseValidationDto ValidateUpdateRequest(RequestUpdateTourTemplateDto request, TourTemplate existingTemplate)
        {
            var result = new ResponseValidationDto
            {
                IsValid = true,
                StatusCode = 200
            };

            // Only validate fields that are being updated (not null)
            if (!string.IsNullOrEmpty(request.Title))
            {
                if (request.Title.Length > 200)
                {
                    AddFieldError(result, nameof(request.Title), "T√™n template kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 200 k√Ω t·ª±");
                }
            }

            // Validate ScheduleDay if being updated
            if (request.ScheduleDays.HasValue)
            {
                var scheduleValidation = TourTemplateScheduleValidator.ValidateScheduleDay(request.ScheduleDays.Value);
                if (!scheduleValidation.IsValid)
                {
                    AddFieldError(result, nameof(request.ScheduleDays), scheduleValidation.ErrorMessage ?? "Ch·ªâ ƒë∆∞·ª£c ch·ªçn Th·ª© 7 ho·∫∑c Ch·ªß nh·∫≠t");
                }
            }

            // Set validation result
            result.IsValid = !result.FieldErrors.Any();
            if (!result.IsValid)
            {
                result.StatusCode = 400;
                result.Message = "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
                result.ValidationErrors = result.FieldErrors.SelectMany(x => x.Value).ToList();
            }

            return result;
        }

        /// <summary>
        /// Validate business rules for tour template
        /// </summary>
        public static ResponseValidationDto ValidateBusinessRules(TourTemplate template)
        {
            var result = new ResponseValidationDto
            {
                IsValid = true,
                StatusCode = 200
            };

            // Validate Saturday OR Sunday only (not both)
            var scheduleValidation = TourTemplateScheduleValidator.ValidateScheduleDay(template.ScheduleDays);
            if (!scheduleValidation.IsValid)
            {
                AddFieldError(result, "ScheduleDays", scheduleValidation.ErrorMessage ?? "L·ªói validation schedule day");
            }

            // Validate Month/Year combination
            if (template.Month < 1 || template.Month > 12)
            {
                AddFieldError(result, "Month", "Th√°ng ph·∫£i t·ª´ 1 ƒë·∫øn 12");
            }

            if (template.Year < 2024 || template.Year > 2030)
            {
                AddFieldError(result, "Year", "NƒÉm ph·∫£i t·ª´ 2024 ƒë·∫øn 2030");
            }

            // Validate first slot date for existing template
            var firstSlotValidation = ValidateFirstSlotDate(template.CreatedAt, template.Month, template.Year);
            if (!firstSlotValidation.IsValid)
            {
                AddFieldError(result, "FirstSlotDate", firstSlotValidation.ErrorMessage);
            }

            // Set validation result
            result.IsValid = !result.FieldErrors.Any();
            if (!result.IsValid)
            {
                result.StatusCode = 400;
                result.Message = "Vi ph·∫°m quy t·∫Øc kinh doanh";
                result.ValidationErrors = result.FieldErrors.SelectMany(x => x.Value).ToList();
            }

            return result;
        }

        /// <summary>
        /// Validate ng√†y b·∫Øt ƒë·∫ßu c·ªßa slot ƒë·∫ßu ti√™n (firstSlotDate) d·ª±a tr√™n ng√†y t·∫°o tour (createdAt).
        /// 
        /// ‚úÖ Quy t·∫Øc:
        /// 1. Ng√†y th√°ng nƒÉm c·ªßa template ph·∫£i l·ªõn h∆°n ng√†y hi·ªán t·∫°i
        /// 2. Slot ƒë·∫ßu ti√™n ph·∫£i n·∫±m **sau √≠t nh·∫•t 30 ng√†y** so v·ªõi ng√†y t·∫°o.
        /// 3. Slot ƒë·∫ßu ti√™n ph·∫£i b·∫Øt ƒë·∫ßu t·ª´ **ng√†y 01 c·ªßa th√°ng k·∫ø ti·∫øp tr·ªü ƒëi**, t·ª©c l√† kh√¥ng ƒë∆∞·ª£c n·∫±m trong c√πng th√°ng ho·∫∑c th√°ng li·ªÅn k·ªÅ nh∆∞ng ch∆∞a nh·∫£y sang ng√†y 1.
        /// 
        /// ‚ö†Ô∏è V√≠ d·ª•:
        /// - createdAt = 28/06/2025 ‚Üí firstSlotDate ph·∫£i >= 01/08/2025 (th√°ng 8 tr·ªü ƒëi)
        /// - createdAt = 01/05/2025 ‚Üí firstSlotDate ph·∫£i >= 01/07/2025
        /// - N·∫øu h√¥m nay l√† 15/01/2025, kh√¥ng th·ªÉ t·∫°o template cho th√°ng 1/2025
        /// 
        /// ‚ùå N·∫øu vi ph·∫°m ƒëi·ªÅu ki·ªán ‚Üí tr·∫£ l·ªói:
        /// "Slot ƒë·∫ßu ti√™n ph·∫£i b·∫Øt ƒë·∫ßu sau √≠t nh·∫•t 30 ng√†y v√† n·∫±m t·ª´ th√°ng k·∫ø ti·∫øp tr·ªü ƒëi (t·ª´ ng√†y 1 c·ªßa th√°ng m·ªõi)."
        /// </summary>
        /// <param name="createdAt">Ng√†y t·∫°o template (ho·∫∑c ng√†y hi·ªán t·∫°i khi t·∫°o m·ªõi)</param>
        /// <param name="slotMonth">Th√°ng c·ªßa slot ƒë·∫ßu ti√™n</param>
        /// <param name="slotYear">NƒÉm c·ªßa slot ƒë·∫ßu ti√™n</param>
        /// <returns>K·∫øt qu·∫£ validation</returns>
        public static (bool IsValid, string ErrorMessage) ValidateFirstSlotDate(DateTime createdAt, int slotMonth, int slotYear)
        {
            // T√≠nh ng√†y ƒë·∫ßu ti√™n c·ªßa th√°ng slot (ng√†y 1)
            var firstSlotDate = new DateTime(slotYear, slotMonth, 1);
            
            // Quy t·∫Øc 1: Template ph·∫£i l·ªõn h∆°n ng√†y hi·ªán t·∫°i
            // So s√°nh v·ªõi th√°ng hi·ªán t·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng t·∫°o template cho th√°ng ƒë√£ qua ho·∫∑c th√°ng hi·ªán t·∫°i
            var currentTime = VietnamTimeZoneUtility.GetVietnamNow();
            var currentMonthFirstDay = new DateTime(currentTime.Year, currentTime.Month, 1);
            
            if (firstSlotDate <= currentMonthFirstDay)
            {
                return (false, $"Kh√¥ng th·ªÉ t·∫°o template cho th√°ng hi·ªán t·∫°i ({currentTime.Month}/{currentTime.Year}) ho·∫∑c th√°ng ƒë√£ qua. " +
                              $"Vui l√≤ng ch·ªçn th√°ng t·ª´ {currentTime.AddMonths(1).Month}/{currentTime.AddMonths(1).Year} tr·ªü ƒëi. " +
                              $"V√≠ d·ª•: month: {currentTime.AddMonths(2).Month}, year: {currentTime.AddMonths(2).Year}");
            }
            
            // Quy t·∫Øc 2: Slot ƒë·∫ßu ti√™n ph·∫£i sau √≠t nh·∫•t 30 ng√†y so v·ªõi ng√†y t·∫°o
            var minimumDate = createdAt.AddDays(30);
            
            if (firstSlotDate < minimumDate)
            {
                var suggestedMonth = minimumDate.AddMonths(1);
                return (false, $"Slot ƒë·∫ßu ti√™n ph·∫£i b·∫Øt ƒë·∫ßu sau √≠t nh·∫•t 30 ng√†y t·ª´ ng√†y t·∫°o ({createdAt:dd/MM/yyyy}). " +
                              $"Ng√†y s·ªõm nh·∫•t c√≥ th·ªÉ: {minimumDate:dd/MM/yyyy}. " +
                              $"Vui l√≤ng ch·ªçn th√°ng {suggestedMonth.Month}/{suggestedMonth.Year} ho·∫∑c mu·ªôn h∆°n. " +
                              $"V√≠ d·ª•: month: {suggestedMonth.Month}, year: {suggestedMonth.Year}");
            }
            
            // Quy t·∫Øc 3: Slot ph·∫£i b·∫Øt ƒë·∫ßu t·ª´ ng√†y 1 c·ªßa th√°ng k·∫ø ti·∫øp tr·ªü ƒëi
            // T√≠nh th√°ng k·∫ø ti·∫øp t·ª´ ng√†y t·∫°o
            var createdAtNextMonth = createdAt.AddMonths(1);
            var nextMonthFirstDay = new DateTime(createdAtNextMonth.Year, createdAtNextMonth.Month, 1);
            
            if (firstSlotDate < nextMonthFirstDay)
            {
                return (false, $"Template ph·∫£i ƒë∆∞·ª£c t·∫°o cho th√°ng k·∫ø ti·∫øp tr·ªü ƒëi. " +
                              $"Ng√†y t·∫°o: {createdAt:dd/MM/yyyy}, th√°ng k·∫ø ti·∫øp: {createdAtNextMonth.Month}/{createdAtNextMonth.Year}. " +
                              $"Vui l√≤ng ch·ªçn month: {createdAtNextMonth.Month}, year: {createdAtNextMonth.Year} ho·∫∑c mu·ªôn h∆°n.");
            }
            
            return (true, string.Empty);
        }

        /// <summary>
        /// Validate slot generation request to ensure it complies with first slot date rules
        /// </summary>
        /// <param name="templateCreatedAt">Template creation date</param>
        /// <param name="slotMonth">Month for slot generation</param>
        /// <param name="slotYear">Year for slot generation</param>
        /// <returns>Validation result</returns>
        public static (bool IsValid, string ErrorMessage) ValidateSlotGenerationDate(DateTime templateCreatedAt, int slotMonth, int slotYear)
        {
            return ValidateFirstSlotDate(templateCreatedAt, slotMonth, slotYear);
        }

        /// <summary>
        /// Validate if user can perform action on template
        /// </summary>
        public static ResponseValidationDto ValidatePermission(TourTemplate template, Guid userId, string action)
        {
            var result = new ResponseValidationDto
            {
                IsValid = true,
                StatusCode = 200
            };

            // Check if user is the owner of the template
            if (template.CreatedById != userId)
            {
                result.IsValid = false;
                result.StatusCode = 403;
                result.Message = $"B·∫°n kh√¥ng c√≥ quy·ªÅn {action} tour template n√†y";
                result.ValidationErrors.Add($"Ch·ªâ ng∆∞·ªùi t·∫°o m·ªõi c√≥ th·ªÉ {action} tour template");
            }

            return result;
        }

        /// <summary>
        /// Helper method to add field error
        /// </summary>
        private static void AddFieldError(ResponseValidationDto result, string fieldName, string errorMessage)
        {
            if (!result.FieldErrors.ContainsKey(fieldName))
            {
                result.FieldErrors[fieldName] = new List<string>();
            }
            result.FieldErrors[fieldName].Add(errorMessage);
        }
    }
}
