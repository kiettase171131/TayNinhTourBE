// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TayNinhTourApi.DataAccessLayer.Contexts;

#nullable disable

namespace TayNinhTourApi.DataAccessLayer.Migrations
{
    [DbContext(typeof(TayNinhTouApiDbContext))]
    partial class TayNinhTouApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ImageTour", b =>
                {
                    b.Property<Guid>("ImagesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)");

                    b.HasKey("ImagesId", "TourId");

                    b.HasIndex("TourId");

                    b.ToTable("ImageTour");
                });

            modelBuilder.Entity("ImageTourTemplate", b =>
                {
                    b.Property<Guid>("ImagesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TourTemplateId")
                        .HasColumnType("char(36)");

                    b.HasKey("ImagesId", "TourTemplateId");

                    b.HasIndex("TourTemplateId");

                    b.ToTable("ImageTourTemplate", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CommentOfAdmin")
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.BlogComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogComments");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.BlogImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogImages");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.BlogReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Reaction")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("BlogId", "UserId")
                        .IsUnique();

                    b.ToTable("BlogReactions");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("PayOsOrderCode")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAfterDiscount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSale")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<int?>("SalePercent")
                        .HasColumnType("int");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("char(36)");

                    b.Property<int>("SoldCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.ProductRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductRatings");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.ProductReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SpecialtyShop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BusinessLicense")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BusinessLicenseUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ClosingHours")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShopActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("OpeningHours")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("RepresentativeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ShopType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_SpecialtyShop_Email");

                    b.HasIndex("IsShopActive")
                        .HasDatabaseName("IX_SpecialtyShop_IsShopActive");

                    b.HasIndex("Location")
                        .HasDatabaseName("IX_SpecialtyShop_Location");

                    b.HasIndex("ShopName")
                        .HasDatabaseName("IX_SpecialtyShop_ShopName");

                    b.HasIndex("ShopType")
                        .HasDatabaseName("IX_SpecialtyShop_ShopType");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_SpecialtyShop_UserId_Unique");

                    b.HasIndex("IsShopActive", "ShopType")
                        .HasDatabaseName("IX_SpecialtyShop_IsShopActive_ShopType");

                    b.ToTable("SpecialtyShops", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SpecialtyShopApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BusinessLicense")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BusinessLicenseUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ClosingHours")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("OpeningHours")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ProcessedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RepresentativeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ShopDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ShopType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_SpecialtyShopApplication_Email");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("IX_SpecialtyShopApplication_ProcessedAt");

                    b.HasIndex("ProcessedById");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_SpecialtyShopApplication_Status");

                    b.HasIndex("SubmittedAt")
                        .HasDatabaseName("IX_SpecialtyShopApplication_SubmittedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_SpecialtyShopApplication_UserId");

                    b.HasIndex("Status", "SubmittedAt")
                        .HasDatabaseName("IX_SpecialtyShopApplication_Status_SubmittedAt");

                    b.ToTable("SpecialtyShopApplications", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicketComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SupportTicketId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SupportTicketId");

                    b.ToTable("SupportTicketComments");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicketImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SupportTicketId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SupportTicketId");

                    b.ToTable("SupportTicketImages");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TimelineItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeSpan>("CheckInTime")
                        .HasColumnType("TIME");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("CHAR(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("SpecialtyShopId")
                        .HasColumnType("CHAR(36)");

                    b.Property<Guid>("TourDetailsId")
                        .HasColumnType("CHAR(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("CHAR(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SpecialtyShopId")
                        .HasDatabaseName("IX_TimelineItem_SpecialtyShopId");

                    b.HasIndex("TourDetailsId")
                        .HasDatabaseName("IX_TimelineItem_TourDetailsId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("TourDetailsId", "SortOrder")
                        .HasDatabaseName("IX_TimelineItem_TourDetailsId_SortOrder");

                    b.ToTable("TimelineItem", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CommentApproved")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TourType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AdultCount")
                        .HasColumnType("int")
                        .HasComment("Số lượng khách người lớn");

                    b.Property<string>("BookingCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("Mã booking duy nhất");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo booking");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("Lý do hủy booking");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày hủy booking");

                    b.Property<int>("ChildCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Số lượng trẻ em");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xác nhận booking");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("Email liên hệ");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("Tên người liên hệ");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("Số điện thoại liên hệ");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("CustomerNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasComment("Ghi chú từ khách hàng");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int")
                        .HasComment("Tổng số lượng khách trong booking");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Trạng thái của booking");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Tổng giá tiền của booking");

                    b.Property<Guid>("TourOperationId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của TourOperation được booking");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của User thực hiện booking");

                    b.HasKey("Id");

                    b.HasIndex("BookingCode")
                        .IsUnique()
                        .HasDatabaseName("IX_TourBookings_BookingCode_Unique");

                    b.HasIndex("BookingDate")
                        .HasDatabaseName("IX_TourBookings_BookingDate");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_TourBookings_Status");

                    b.HasIndex("TourOperationId")
                        .HasDatabaseName("IX_TourBookings_TourOperationId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_TourBookings_UserId");

                    b.HasIndex("TourOperationId", "Status")
                        .HasDatabaseName("IX_TourBookings_TourOperationId_Status");

                    b.ToTable("TourBookings", null, t =>
                        {
                            t.HasCheckConstraint("CK_TourBookings_AdultCount_NonNegative", "AdultCount >= 0");

                            t.HasCheckConstraint("CK_TourBookings_ChildCount_NonNegative", "ChildCount >= 0");

                            t.HasCheckConstraint("CK_TourBookings_GuestCount_Match", "NumberOfGuests = AdultCount + ChildCount");

                            t.HasCheckConstraint("CK_TourBookings_NumberOfGuests_Positive", "NumberOfGuests > 0");

                            t.HasCheckConstraint("CK_TourBookings_TotalPrice_NonNegative", "TotalPrice >= 0");
                        });
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CommentApproved")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasComment("Bình luận từ admin khi duyệt/từ chối tour details");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasComment("Mô tả về lịch trình này");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SkillsRequired")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("Kỹ năng yêu cầu cho hướng dẫn viên (comma-separated)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Trạng thái duyệt của tour details");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasComment("Tiêu đề của lịch trình");

                    b.Property<Guid>("TourTemplateId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của tour template mà chi tiết này thuộc về");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_TourDetails_Status");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_TourDetails_Title");

                    b.HasIndex("TourTemplateId")
                        .HasDatabaseName("IX_TourDetails_TourTemplateId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("TourDetails", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourDetailsSpecialtyShop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Thời gian hết hạn invitation");

                    b.Property<DateTime>("InvitedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Thời gian được mời tham gia tour");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasComment("Ưu tiên hiển thị trong timeline");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Thời gian shop phản hồi");

                    b.Property<string>("ResponseNote")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("Ghi chú từ shop khi phản hồi");

                    b.Property<Guid>("SpecialtyShopId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của SpecialtyShop được mời");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Trạng thái phản hồi của shop");

                    b.Property<Guid>("TourDetailsId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của TourDetails");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SpecialtyShopId")
                        .HasDatabaseName("IX_TourDetailsSpecialtyShops_SpecialtyShopId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_TourDetailsSpecialtyShops_Status");

                    b.HasIndex("TourDetailsId")
                        .HasDatabaseName("IX_TourDetailsSpecialtyShops_TourDetailsId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("TourDetailsId", "SpecialtyShopId")
                        .IsUnique()
                        .HasDatabaseName("IX_TourDetailsSpecialtyShops_TourDetails_Shop_Unique");

                    b.ToTable("TourDetailsSpecialtyShops", null, t =>
                        {
                            t.HasCheckConstraint("CK_TourDetailsSpecialtyShops_ExpiresAt", "ExpiresAt > InvitedAt");

                            t.HasCheckConstraint("CK_TourDetailsSpecialtyShops_RespondedAt", "RespondedAt IS NULL OR RespondedAt >= InvitedAt");
                        });
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourGuide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("char(36)")
                        .HasComment("Foreign Key to approved TourGuideApplication");

                    b.Property<DateTime>("ApprovedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Date when the tour guide was approved and became active");

                    b.Property<Guid>("ApprovedById")
                        .HasColumnType("char(36)")
                        .HasComment("ID of the admin who approved this tour guide");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("Contact email address");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasComment("Tour guide experience description");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("Full name of the tour guide");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasComment("Whether the tour guide is currently available for new tours");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasComment("Additional notes about the tour guide");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("Contact phone number");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("Tour guide's profile image URL");

                    b.Property<decimal>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0.00m)
                        .HasComment("Average rating from tour participants");

                    b.Property<string>("Skills")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("Tour guide skills (comma-separated TourGuideSkill enum values)");

                    b.Property<int>("TotalToursGuided")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Total number of tours guided");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasComment("Foreign Key to User table - One-to-One relationship");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique()
                        .HasDatabaseName("IX_TourGuides_ApplicationId_Unique");

                    b.HasIndex("ApprovedAt")
                        .HasDatabaseName("IX_TourGuides_ApprovedAt");

                    b.HasIndex("ApprovedById")
                        .HasDatabaseName("IX_TourGuides_ApprovedById");

                    b.HasIndex("IsAvailable")
                        .HasDatabaseName("IX_TourGuides_IsAvailable");

                    b.HasIndex("Rating")
                        .HasDatabaseName("IX_TourGuides_Rating");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_TourGuides_UserId_Unique");

                    b.HasIndex("IsAvailable", "Rating")
                        .HasDatabaseName("IX_TourGuides_Available_Rating");

                    b.ToTable("TourGuides", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourGuideApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("CurriculumVitae")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CvContentType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CvFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("CvFileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("CvOriginalFileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Languages")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasComment("DEPRECATED: Sử dụng Skills field thay thế");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ProcessedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Skills")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("Kỹ năng của hướng dẫn viên (comma-separated TourGuideSkill enum values)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_TourGuideApplications_Email");

                    b.HasIndex("ProcessedById");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_TourGuideApplications_Status");

                    b.HasIndex("SubmittedAt")
                        .HasDatabaseName("IX_TourGuideApplications_SubmittedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_TourGuideApplications_UserId");

                    b.HasIndex("UserId", "Status")
                        .HasDatabaseName("IX_TourGuideApplications_UserId_Status");

                    b.ToTable("TourGuideApplications", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourGuideInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Thời gian hết hạn lời mời");

                    b.Property<Guid>("GuideId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của TourGuide được mời");

                    b.Property<int>("InvitationType")
                        .HasColumnType("int")
                        .HasComment("Loại lời mời (Automatic hoặc Manual)");

                    b.Property<DateTime>("InvitedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Thời gian gửi lời mời");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("Ghi chú từ TourGuide khi từ chối lời mời");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Thời gian TourGuide phản hồi");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("Trạng thái lời mời");

                    b.Property<Guid>("TourDetailsId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của TourDetails mà lời mời này thuộc về");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_TourGuideInvitations_ExpiresAt");

                    b.HasIndex("GuideId")
                        .HasDatabaseName("IX_TourGuideInvitations_GuideId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_TourGuideInvitations_Status");

                    b.HasIndex("TourDetailsId")
                        .HasDatabaseName("IX_TourGuideInvitations_TourDetailsId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Status", "ExpiresAt")
                        .HasDatabaseName("IX_TourGuideInvitations_Status_ExpiresAt");

                    b.HasIndex("TourDetailsId", "GuideId")
                        .IsUnique()
                        .HasDatabaseName("IX_TourGuideInvitations_TourDetailsId_GuideId");

                    b.ToTable("TourGuideInvitations", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<int>("CurrentBookings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Số lượng khách đã booking hiện tại");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasComment("Mô tả bổ sung cho tour operation");

                    b.Property<Guid?>("GuideId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của User làm hướng dẫn viên cho tour này (optional)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasComment("Trạng thái hoạt động của tour operation");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("int")
                        .HasComment("Số lượng khách tối đa cho tour operation này");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("Ghi chú bổ sung cho tour operation");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Giá tour cho operation này");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasComment("Row version cho optimistic concurrency control");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TourDetailsId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của TourDetails mà operation này thuộc về");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrentBookings")
                        .HasDatabaseName("IX_TourOperations_CurrentBookings");

                    b.HasIndex("GuideId")
                        .HasDatabaseName("IX_TourOperations_GuideId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_TourOperations_IsActive");

                    b.HasIndex("TourDetailsId")
                        .IsUnique()
                        .HasDatabaseName("IX_TourOperations_TourDetailsId_Unique");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("CurrentBookings", "MaxGuests")
                        .HasDatabaseName("IX_TourOperations_CurrentBookings_MaxGuests");

                    b.HasIndex("GuideId", "IsActive")
                        .HasDatabaseName("IX_TourOperations_GuideId_IsActive");

                    b.ToTable("TourOperations", null, t =>
                        {
                            t.HasCheckConstraint("CK_TourOperations_CurrentBookings_LessOrEqualMaxGuests", "CurrentBookings <= MaxGuests");

                            t.HasCheckConstraint("CK_TourOperations_CurrentBookings_NonNegative", "CurrentBookings >= 0");

                            t.HasCheckConstraint("CK_TourOperations_MaxGuests_Positive", "MaxGuests > 0");

                            t.HasCheckConstraint("CK_TourOperations_Price_Positive", "Price >= 0");
                        });
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasComment("Trạng thái slot có sẵn sàng để booking không");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ScheduleDay")
                        .HasColumnType("int")
                        .HasComment("Ngày trong tuần của tour (Saturday hoặc Sunday)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("Trạng thái của tour slot");

                    b.Property<DateOnly>("TourDate")
                        .HasColumnType("date")
                        .HasComment("Ngày tour cụ thể sẽ diễn ra");

                    b.Property<Guid?>("TourDetailsId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của TourDetails được assign cho slot này");

                    b.Property<Guid>("TourTemplateId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của TourTemplate mà slot này được tạo từ");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_TourSlots_IsActive");

                    b.HasIndex("ScheduleDay")
                        .HasDatabaseName("IX_TourSlots_ScheduleDay");

                    b.HasIndex("TourDate")
                        .HasDatabaseName("IX_TourSlots_TourDate");

                    b.HasIndex("TourDetailsId");

                    b.HasIndex("TourTemplateId")
                        .HasDatabaseName("IX_TourSlots_TourTemplateId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("ScheduleDay", "IsActive")
                        .HasDatabaseName("IX_TourSlots_ScheduleDay_IsActive");

                    b.HasIndex("TourDate", "IsActive")
                        .HasDatabaseName("IX_TourSlots_TourDate_IsActive");

                    b.HasIndex("TourTemplateId", "TourDate", "TourDetailsId")
                        .IsUnique()
                        .HasDatabaseName("IX_TourSlots_TourTemplateId_TourDate_TourDetailsId");

                    b.ToTable("TourSlots", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleDays")
                        .HasColumnType("int");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("TemplateType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("IX_TourTemplate_CreatedById");

                    b.HasIndex("EndLocation")
                        .HasDatabaseName("IX_TourTemplate_EndLocation");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_TourTemplate_IsActive");

                    b.HasIndex("StartLocation")
                        .HasDatabaseName("IX_TourTemplate_StartLocation");

                    b.HasIndex("TemplateType")
                        .HasDatabaseName("IX_TourTemplate_TemplateType");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Month", "Year")
                        .HasDatabaseName("IX_TourTemplate_Month_Year");

                    b.HasIndex("TemplateType", "IsActive")
                        .HasDatabaseName("IX_TourTemplate_TemplateType_IsActive");

                    b.HasIndex("Year", "Month", "IsActive")
                        .HasDatabaseName("IX_TourTemplate_Year_Month_IsActive");

                    b.ToTable("TourTemplates", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TOtpSecret")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("ImageTour", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Tour", null)
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageTourTemplate", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourTemplate", null)
                        .WithMany()
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Blog", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.BlogComment", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Blog", "Blog")
                        .WithMany("BlogComments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.BlogComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithMany("BlogComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.BlogImage", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Blog", "Blog")
                        .WithMany("BlogImages")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.BlogReaction", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Blog", "Blog")
                        .WithMany("BlogReactions")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithMany("BlogReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.CartItem", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.OrderDetail", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Product", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.ProductImage", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.ProductRating", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.ProductReview", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SpecialtyShop", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithOne("SpecialtyShop")
                        .HasForeignKey("TayNinhTourApi.DataAccessLayer.Entities.SpecialtyShop", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SpecialtyShopApplication", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "ProcessedBy")
                        .WithMany()
                        .HasForeignKey("ProcessedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicket", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "Admin")
                        .WithMany("TicketsAssigned")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithMany("TicketsCreated")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicketComment", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany("TicketComments")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.SupportTicket", "SupportTicket")
                        .WithMany("Comments")
                        .HasForeignKey("SupportTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("SupportTicket");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicketImage", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.SupportTicket", "SupportTicket")
                        .WithMany("Images")
                        .HasForeignKey("SupportTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportTicket");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TimelineItem", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.SpecialtyShop", "SpecialtyShop")
                        .WithMany("TimelineItems")
                        .HasForeignKey("SpecialtyShopId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourDetails", "TourDetails")
                        .WithMany("Timeline")
                        .HasForeignKey("TourDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("SpecialtyShop");

                    b.Navigation("TourDetails");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Tour", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany("ToursCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany("ToursUpdated")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourBooking", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourOperation", "TourOperation")
                        .WithMany("TourBookings")
                        .HasForeignKey("TourOperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TourOperation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourDetails", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany("TourDetailsCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourTemplate", "TourTemplate")
                        .WithMany("TourDetails")
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany("TourDetailsUpdated")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("TourTemplate");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourDetailsSpecialtyShop", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.SpecialtyShop", "SpecialtyShop")
                        .WithMany("TourInvitations")
                        .HasForeignKey("SpecialtyShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourDetails", "TourDetails")
                        .WithMany("InvitedSpecialtyShops")
                        .HasForeignKey("TourDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("SpecialtyShop");

                    b.Navigation("TourDetails");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourGuide", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourGuideApplication", "Application")
                        .WithOne("ApprovedTourGuide")
                        .HasForeignKey("TayNinhTourApi.DataAccessLayer.Entities.TourGuide", "ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "ApprovedBy")
                        .WithMany("ApprovedTourGuides")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithOne("TourGuide")
                        .HasForeignKey("TayNinhTourApi.DataAccessLayer.Entities.TourGuide", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("ApprovedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourGuideApplication", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "ProcessedBy")
                        .WithMany()
                        .HasForeignKey("ProcessedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProcessedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourGuideInvitation", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourGuide", "TourGuide")
                        .WithMany("Invitations")
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourDetails", "TourDetails")
                        .WithMany()
                        .HasForeignKey("TourDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("TourDetails");

                    b.Navigation("TourGuide");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourOperation", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany("TourOperationsCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourGuide", "TourGuide")
                        .WithMany("TourOperations")
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "Guide")
                        .WithMany("TourOperationsAsGuide")
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourDetails", "TourDetails")
                        .WithOne("TourOperation")
                        .HasForeignKey("TayNinhTourApi.DataAccessLayer.Entities.TourOperation", "TourDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany("TourOperationsUpdated")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("Guide");

                    b.Navigation("TourDetails");

                    b.Navigation("TourGuide");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourSlot", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany("TourSlotsCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourDetails", "TourDetails")
                        .WithMany("AssignedSlots")
                        .HasForeignKey("TourDetailsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourTemplate", "TourTemplate")
                        .WithMany("TourSlots")
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany("TourSlotsUpdated")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("TourDetails");

                    b.Navigation("TourTemplate");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourTemplate", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany("TourTemplatesCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany("TourTemplatesUpdated")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.User", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Blog", b =>
                {
                    b.Navigation("BlogComments");

                    b.Navigation("BlogImages");

                    b.Navigation("BlogReactions");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.BlogComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Product", b =>
                {
                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SpecialtyShop", b =>
                {
                    b.Navigation("TimelineItems");

                    b.Navigation("TourInvitations");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicket", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourDetails", b =>
                {
                    b.Navigation("AssignedSlots");

                    b.Navigation("InvitedSpecialtyShops");

                    b.Navigation("Timeline");

                    b.Navigation("TourOperation");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourGuide", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("TourOperations");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourGuideApplication", b =>
                {
                    b.Navigation("ApprovedTourGuide");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourOperation", b =>
                {
                    b.Navigation("TourBookings");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourTemplate", b =>
                {
                    b.Navigation("TourDetails");

                    b.Navigation("TourSlots");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("ApprovedTourGuides");

                    b.Navigation("BlogComments");

                    b.Navigation("BlogReactions");

                    b.Navigation("Blogs");

                    b.Navigation("SpecialtyShop");

                    b.Navigation("TicketComments");

                    b.Navigation("TicketsAssigned");

                    b.Navigation("TicketsCreated");

                    b.Navigation("TourDetailsCreated");

                    b.Navigation("TourDetailsUpdated");

                    b.Navigation("TourGuide");

                    b.Navigation("TourOperationsAsGuide");

                    b.Navigation("TourOperationsCreated");

                    b.Navigation("TourOperationsUpdated");

                    b.Navigation("TourSlotsCreated");

                    b.Navigation("TourSlotsUpdated");

                    b.Navigation("TourTemplatesCreated");

                    b.Navigation("TourTemplatesUpdated");

                    b.Navigation("ToursCreated");

                    b.Navigation("ToursUpdated");
                });
#pragma warning restore 612, 618
        }
    }
}
