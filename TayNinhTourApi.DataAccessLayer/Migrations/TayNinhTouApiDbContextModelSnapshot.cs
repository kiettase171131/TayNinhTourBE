// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TayNinhTourApi.DataAccessLayer.Contexts;

#nullable disable

namespace TayNinhTourApi.DataAccessLayer.Migrations
{
    [DbContext(typeof(TayNinhTouApiDbContext))]
    partial class TayNinhTouApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ImageTour", b =>
                {
                    b.Property<Guid>("ImagesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)");

                    b.HasKey("ImagesId", "TourId");

                    b.HasIndex("TourId");

                    b.ToTable("ImageTour");
                });

            modelBuilder.Entity("ImageTourTemplate", b =>
                {
                    b.Property<Guid>("ImagesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TourTemplateId")
                        .HasColumnType("char(36)");

                    b.HasKey("ImagesId", "TourTemplateId");

                    b.HasIndex("TourTemplateId");

                    b.ToTable("ImageTourTemplate", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.BlogImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogImages");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("OpeningHours")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("ShopType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("IX_Shop_CreatedById");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Shop_IsActive");

                    b.HasIndex("Location")
                        .HasDatabaseName("IX_Shop_Location");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Shop_Name");

                    b.HasIndex("ShopType")
                        .HasDatabaseName("IX_Shop_ShopType");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Rating", "IsActive")
                        .HasDatabaseName("IX_Shop_Rating_IsActive");

                    b.HasIndex("ShopType", "IsActive")
                        .HasDatabaseName("IX_Shop_ShopType_IsActive");

                    b.ToTable("Shops", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicketComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SupportTicketId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SupportTicketId");

                    b.ToTable("SupportTicketComments");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicketImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SupportTicketId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SupportTicketId");

                    b.ToTable("SupportTicketImages");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CommentApproved")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TourType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasComment("Mô tả chi tiết về hoạt động");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("Địa điểm hoặc tên hoạt động");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của shop liên quan (nếu có)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasComment("Thứ tự sắp xếp trong timeline");

                    b.Property<TimeOnly>("TimeSlot")
                        .HasColumnType("time")
                        .HasComment("Thời gian trong ngày cho hoạt động này");

                    b.Property<Guid>("TourTemplateId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của tour template mà chi tiết này thuộc về");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("IX_TourDetails_ShopId");

                    b.HasIndex("TimeSlot")
                        .HasDatabaseName("IX_TourDetails_TimeSlot");

                    b.HasIndex("TourTemplateId")
                        .HasDatabaseName("IX_TourDetails_TourTemplateId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("TourTemplateId", "SortOrder")
                        .IsUnique()
                        .HasDatabaseName("IX_TourDetails_TourTemplateId_SortOrder");

                    b.HasIndex("TourTemplateId", "TimeSlot")
                        .HasDatabaseName("IX_TourDetails_TourTemplateId_TimeSlot");

                    b.ToTable("TourDetails", null, t =>
                        {
                            t.HasCheckConstraint("CK_TourDetails_SortOrder_Positive", "SortOrder > 0");
                        });
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourGuideApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("CurriculumVitae")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TourGuideApplications");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasComment("Mô tả bổ sung cho tour operation");

                    b.Property<Guid>("GuideId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của User làm hướng dẫn viên cho tour này");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasComment("Trạng thái hoạt động của tour operation");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("int")
                        .HasComment("Số lượng khách tối đa cho tour operation này");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Giá tour cho operation này");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TourSlotId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của TourSlot mà operation này thuộc về");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GuideId")
                        .HasDatabaseName("IX_TourOperations_GuideId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_TourOperations_IsActive");

                    b.HasIndex("TourSlotId")
                        .IsUnique()
                        .HasDatabaseName("IX_TourOperations_TourSlotId_Unique");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("GuideId", "IsActive")
                        .HasDatabaseName("IX_TourOperations_GuideId_IsActive");

                    b.ToTable("TourOperations", null, t =>
                        {
                            t.HasCheckConstraint("CK_TourOperations_MaxGuests_Positive", "MaxGuests > 0");

                            t.HasCheckConstraint("CK_TourOperations_Price_Positive", "Price > 0");
                        });
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasComment("Trạng thái slot có sẵn sàng để booking không");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ScheduleDay")
                        .HasColumnType("int")
                        .HasComment("Ngày trong tuần của tour (Saturday hoặc Sunday)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("Trạng thái của tour slot");

                    b.Property<DateOnly>("TourDate")
                        .HasColumnType("date")
                        .HasComment("Ngày tour cụ thể sẽ diễn ra");

                    b.Property<Guid>("TourTemplateId")
                        .HasColumnType("char(36)")
                        .HasComment("ID của TourTemplate mà slot này được tạo từ");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_TourSlots_IsActive");

                    b.HasIndex("ScheduleDay")
                        .HasDatabaseName("IX_TourSlots_ScheduleDay");

                    b.HasIndex("TourDate")
                        .HasDatabaseName("IX_TourSlots_TourDate");

                    b.HasIndex("TourTemplateId")
                        .HasDatabaseName("IX_TourSlots_TourTemplateId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("ScheduleDay", "IsActive")
                        .HasDatabaseName("IX_TourSlots_ScheduleDay_IsActive");

                    b.HasIndex("TourDate", "IsActive")
                        .HasDatabaseName("IX_TourSlots_TourDate_IsActive");

                    b.HasIndex("TourTemplateId", "TourDate")
                        .IsUnique()
                        .HasDatabaseName("IX_TourSlots_TourTemplateId_TourDate");

                    b.ToTable("TourSlots", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccommodationInfo")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CancellationPolicy")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("ChildMaxAge")
                        .HasColumnType("int");

                    b.Property<decimal?>("ChildPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ExcludedServices")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("IncludedServices")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("int");

                    b.Property<string>("MealsIncluded")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("MinGuests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ScheduleDays")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequirements")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("TemplateType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Transportation")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("IX_TourTemplate_CreatedById");

                    b.HasIndex("EndLocation")
                        .HasDatabaseName("IX_TourTemplate_EndLocation");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_TourTemplate_IsActive");

                    b.HasIndex("StartLocation")
                        .HasDatabaseName("IX_TourTemplate_StartLocation");

                    b.HasIndex("TemplateType")
                        .HasDatabaseName("IX_TourTemplate_TemplateType");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Price", "IsActive")
                        .HasDatabaseName("IX_TourTemplate_Price_IsActive");

                    b.HasIndex("TemplateType", "IsActive")
                        .HasDatabaseName("IX_TourTemplate_TemplateType_IsActive");

                    b.ToTable("TourTemplates", (string)null);
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TOtpSecret")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ImageTour", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Tour", null)
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageTourTemplate", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourTemplate", null)
                        .WithMany()
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Blog", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.BlogImage", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Blog", "Blog")
                        .WithMany("BlogImages")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Shop", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany("ShopsCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany("ShopsUpdated")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicket", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicketComment", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.SupportTicket", "SupportTicket")
                        .WithMany("Comments")
                        .HasForeignKey("SupportTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("SupportTicket");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicketImage", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.SupportTicket", "SupportTicket")
                        .WithMany("Images")
                        .HasForeignKey("SupportTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportTicket");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Tour", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany("ToursCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany("ToursUpdated")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourDetails", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany("TourDetailsCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Shop", "Shop")
                        .WithMany("TourDetails")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourTemplate", "TourTemplate")
                        .WithMany("TourDetails")
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany("TourDetailsUpdated")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("Shop");

                    b.Navigation("TourTemplate");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourGuideApplication", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourOperation", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany("TourOperationsCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "Guide")
                        .WithMany("TourOperationsAsGuide")
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourSlot", "TourSlot")
                        .WithOne("TourOperation")
                        .HasForeignKey("TayNinhTourApi.DataAccessLayer.Entities.TourOperation", "TourSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany("TourOperationsUpdated")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("Guide");

                    b.Navigation("TourSlot");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourSlot", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany("TourSlotsCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.TourTemplate", "TourTemplate")
                        .WithMany("TourSlots")
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany("TourSlotsUpdated")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("TourTemplate");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourTemplate", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "CreatedBy")
                        .WithMany("TourTemplatesCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.User", "UpdatedBy")
                        .WithMany("TourTemplatesUpdated")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.User", b =>
                {
                    b.HasOne("TayNinhTourApi.DataAccessLayer.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Blog", b =>
                {
                    b.Navigation("BlogImages");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.Shop", b =>
                {
                    b.Navigation("TourDetails");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.SupportTicket", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourSlot", b =>
                {
                    b.Navigation("TourOperation");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.TourTemplate", b =>
                {
                    b.Navigation("TourDetails");

                    b.Navigation("TourSlots");
                });

            modelBuilder.Entity("TayNinhTourApi.DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("ShopsCreated");

                    b.Navigation("ShopsUpdated");

                    b.Navigation("TourDetailsCreated");

                    b.Navigation("TourDetailsUpdated");

                    b.Navigation("TourOperationsAsGuide");

                    b.Navigation("TourOperationsCreated");

                    b.Navigation("TourOperationsUpdated");

                    b.Navigation("TourSlotsCreated");

                    b.Navigation("TourSlotsUpdated");

                    b.Navigation("TourTemplatesCreated");

                    b.Navigation("TourTemplatesUpdated");

                    b.Navigation("ToursCreated");

                    b.Navigation("ToursUpdated");
                });
#pragma warning restore 612, 618
        }
    }
}
